<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
    <contextName>demo-logback</contextName>
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%red(%d{yyyy-MM-dd HH:mm:ss}) %contextName %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{15}) - %cyan(%msg%n)</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
    <!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过10MB时，对当前日志进行分割 重命名-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--生成文件位置-->
        <File>logs/demo.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- SizeAndTimeBasedRollingPolicy是基于时间和文件大小的滚动策略  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/demo.2018-12-05.0.log -->
            <!-- 在文件日期后加“.%i”,区别生成当天的多个文件,否则会报错 -->
            <fileNamePattern>logs/demo.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 单个日志文件最多 10MB, 15天的日志周期，最大不能超过1GB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 每产生一个日志文件，该日志文件的保存期限为15天 -->
            <maxHistory>15</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %contextName [%thread] %-5level %logger{15} - %msg%n</pattern>
            <!-- 记录日志的编码:此处设置字符集 - -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- 指定最基础的日志输出级别 -->
    <root level="info">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>
    <!-- 用来设置某一个包或者具体的某一个类的日志打印级别 -->
    <!-- com.liaocx.controller为根包,发生在这个根包下面的所有日志操作行为的权限都是DEBUG, -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger name="com.liaocx.controller" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>
</configuration>